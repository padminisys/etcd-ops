apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: etcd-public
  namespace: apisix
  labels:
    app: etcd
    component: database
    version: v3.6.0
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # NGINX controller
    kubernetes.io/ingress.class: nginx
    # gRPC over TLS to backend (important!)
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # ðŸ”’ Allow only these source IPs at the edge (comma-separated)
    nginx.ingress.kubernetes.io/whitelist-source-range: "<YOUR_CIDR_LIST>"
    # TLS to etcd backend: verify server cert using your CA; no client cert presented
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
    nginx.ingress.kubernetes.io/proxy-ssl-verify-depth: "2"
    nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
    nginx.ingress.kubernetes.io/proxy-ssl-name: "etcd.apisix.svc.cluster.local"
    # Secret must contain ca.crt (trusted CA for etcd). Using your existing secret is fine.
    nginx.ingress.kubernetes.io/proxy-ssl-secret: "apisix/etcd-nginx-client"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - etcd.padmini.systems
    secretName: etcd-padmini-tls
  rules:
  - host: etcd.padmini.systems
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: etcd-client
            port:
              number: 2379
