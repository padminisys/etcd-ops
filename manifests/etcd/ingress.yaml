apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: etcd-public
  namespace: apisix
  labels:
    app: etcd
    component: database
    version: v3.6.0
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod

    # gRPC over **TLS** to the backend
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"

    # ðŸ”’ OPTIONAL: limit who can hit the edge (fill in your real IPs/ranges)
    # nginx.ingress.kubernetes.io/whitelist-source-range: "203.0.113.10/32,198.51.100.22/32"

    # NGINX â†’ etcd mTLS: verify etcd with your CA and present NGINX client cert
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
    nginx.ingress.kubernetes.io/proxy-ssl-verify-depth: "2"
    nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
    nginx.ingress.kubernetes.io/proxy-ssl-name: "etcd.apisix.svc.cluster.local"
    # This secret must contain: ca.crt (to verify etcd), tls.crt & tls.key (client cert/key for NGINX)
    nginx.ingress.kubernetes.io/proxy-ssl-secret: "apisix/etcd-nginx-client"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - etcd.padmini.systems
    secretName: etcd-padmini-tls
  rules:
  - host: etcd.padmini.systems
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: etcd-client
            port:
              number: 2379
