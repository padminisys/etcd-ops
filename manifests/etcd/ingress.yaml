apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: etcd-public
  namespace: apisix
  labels:
    app: etcd
    component: database
    version: v3.6.0
  annotations:
    # Public TLS from Let's Encrypt
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # gRPC frontend
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # helpful for gRPC streams / slow links
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"

    # --- Client mTLS at the edge (your custom CA verifies client certs) ---
    nginx.ingress.kubernetes.io/auth-tls-secret: "apisix/etcd-root-ca"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"

    # --- mTLS from Ingress -> etcd backend ---
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
    nginx.ingress.kubernetes.io/proxy-ssl-verify-depth: "2"
    nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
    # SNI must match SAN in your internal cert
    nginx.ingress.kubernetes.io/proxy-ssl-name: "etcd.apisix.svc.cluster.local"
    # Secret with: ca.crt (to verify etcd), tls.crt/tls.key (client cert for NGINX)
    nginx.ingress.kubernetes.io/proxy-ssl-secret: "apisix/etcd-nginx-client"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - etcd.padmini.systems
    secretName: etcd-padmini-tls
  rules:
  - host: etcd.padmini.systems
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: etcd-client
            port:
              number: 2379
